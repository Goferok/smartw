import React, { useState, useEffect } from "react";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { NavigationContainer } from "@react-navigation/native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import Ionicons from "react-native-vector-icons/Ionicons";
import HomeScreen from "./screens/HomeScreen";
import ModesScreen from "./screens/ModesScreen";
import SettingsScreen from "./screens/SettingsScreen";
import { Alert } from "react-native";


// ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
export type RootStackParamList = {
  MainTabs: { screen?: "Home" | "Modes" | "Settings"; params?: { deviceIp?: string } };
  Modes: { deviceIp: string };
  Settings: { deviceIp: string };
};


type BottomTabParamList = {
  Home: undefined;
  Modes: { deviceIp: string };
  Settings: { deviceIp: string };
};


const Stack = createNativeStackNavigator<RootStackParamList>();
const Tab = createBottomTabNavigator<BottomTabParamList>();

type MainTabsProps = {
  selectedDevice: string | null;
  updateSelectedDevice: (deviceIp: string) => void;
};

// üîª –ì–ª–∞–≤–Ω—ã–π —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
export default function AppNavigator() {
  const [selectedDevice, setSelectedDevice] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const updateSelectedDevice = (deviceIp: string) => {
    setSelectedDevice(deviceIp);
    AsyncStorage.setItem("selectedDevice", deviceIp); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
  };

  useEffect(() => {
    const loadSelectedDevice = async () => {
      const storedDeviceIp = await AsyncStorage.getItem("selectedDevice");
      if (storedDeviceIp) setSelectedDevice(storedDeviceIp);
    };
    loadSelectedDevice();
  }, []);

  return (
    <Stack.Navigator screenOptions={{ headerShown: false }}>
      <Stack.Screen name="MainTabs">
        {() => (
          <MainTabs
            selectedDevice={selectedDevice}
            updateSelectedDevice={updateSelectedDevice} // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          />
        )}
      </Stack.Screen>
      <Stack.Screen
        name="Modes"
        component={ModesScreen}
        options={{ title: "–†–µ–∂–∏–º—ã" }}
        initialParams={{ deviceIp: selectedDevice || "" }}
      />
    </Stack.Navigator>
  );
}

function MainTabs({ selectedDevice, updateSelectedDevice }: MainTabsProps) {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ color, size }) => {
          let iconName = "help-circle";

          if (route.name === "Home") iconName = "home";
          else if (route.name === "Modes") iconName = "sunny";
          else if (route.name === "Settings") iconName = "settings";

          return <Ionicons name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: "#f9c154",
        tabBarInactiveTintColor: "gray",
        tabBarStyle: { backgroundColor: "#282A36" },
        headerShown: false,
      })}
    >
      <Tab.Screen name="Home" options={{ title: "–ì–ª–∞–≤–Ω–∞—è" }}>
        {() => <HomeScreen updateSelectedDevice={updateSelectedDevice} />}
      </Tab.Screen>

      <Tab.Screen
  name="Modes"
  options={{ title: "–†–µ–∂–∏–º—ã" }}
  component={ModesScreen}
  listeners={({ navigation }) => ({
    tabPress: (e) => {
      if (!selectedDevice) {
        e.preventDefault();
        Alert.alert("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
      } else {
        navigation.navigate("Modes", { deviceIp: selectedDevice });
      }
    },
  })}
      />

<Tab.Screen
  name="Settings"
  options={{ title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" }}
  component={SettingsScreen}
  listeners={({ navigation }) => ({
    tabPress: (e) => {
      if (!selectedDevice) {
        e.preventDefault();
        Alert.alert("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
      } else {
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        navigation.navigate("Settings", { deviceIp: selectedDevice }); // ‚úÖ –Ø–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      }
    },
  })}
      />
    </Tab.Navigator>
  );
}