import React, { useEffect, useState, useRef } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  Switch,
  StyleSheet,
  TextInput,
  ScrollView,
  Alert,
  Modal,
  Keyboard,
  TouchableWithoutFeedback,
  SafeAreaView,
  ActivityIndicator
} from "react-native";
import { Picker } from "@react-native-picker/picker";
import { useRoute, RouteProp, useFocusEffect, useNavigation } from "@react-navigation/native";
import Icon from "react-native-vector-icons/Ionicons";
import DatePicker from "react-native-date-picker";
import dgram from "react-native-udp";
import { RootStackParamList } from "../AppNavigator";
import { NativeStackNavigationProp } from "@react-navigation/native-stack";







export default function SettingsScreen() {
  const route = useRoute<RouteProp<RootStackParamList, "Settings">>();
  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const { deviceIp, isDemoMode } = route.params;
  //const [deviceIp, setDeviceIp] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [deviceName, setDeviceName] = useState("");
  const [deviceLocation, setDeviceLocation] = useState("");
  const [timezone, setTimezone] = useState(3);
  const [modalVisible, setModalVisible] = useState(false);
  const [modalType, setModalType] = useState<"name" | "location" | null>(null);
  const [inputValue, setInputValue] = useState("");
  const [currentTime, setCurrentTime] = useState("00:00");
  const [currentDay, setCurrentDay] = useState("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫");
  const [autoMode, setAutoMode] = useState(false);
  const [schedule, setSchedule] = useState<Record<string, { start: Date; end: Date; enabled: boolean }>>({});
  const [pickerVisible, setPickerVisible] = useState(false);
  const [selectedDay, setSelectedDay] = useState<string | null>(null);
  const [pickerType, setPickerType] = useState<"start" | "end">("start");
  const [presenceSensorEnabled, setPresenceSensorEnabled] = useState(false);
  const [presenceTimeout, setPresenceTimeout] = useState<number>(5); // –í –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω)
  const previousScheduleRef = useRef<Record<string, { start: Date; end: Date; enabled: boolean }>>({});
  // üìå –¢–∞–π–º–µ—Ä –¥–ª—è debounce
  const scheduleUpdateTimeout = useRef<NodeJS.Timeout | null>(null);
  const socketRef = useRef<ReturnType<typeof dgram.createSocket> | null>(null);
  const isMounted = useRef(true);
  const [firmwareVersion, setFirmwareVersion] = useState<string | null>(null);
  const [updating, setUpdating] = useState(false);
  const [firmwareModalVisible, setFirmwareModalVisible] = useState(false);
  const [latestFirmwareVersion, setLatestFirmwareVersion] = useState<string | null>(null);
  const updateIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null);

  const timeIntervalRef = useRef<number | null>(null);



  // üü¢ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π
  const weekdaysController = [
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞",
    "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
  ];

  type ScheduleEntry = {
    start: string;
    end: string;
    enabled: boolean;
  };
  const timezones = [
    { value: -12, label: "UTC -12:00 (–ë–µ–π–∫–µ—Ä, –•–∞—É–ª–µ–Ω–¥)" },
    { value: -11, label: "UTC -11:00 (–°–∞–º–æ–∞, –ú–∏–¥—É—ç–π)" },
    { value: -10, label: "UTC -10:00 (–ì–æ–Ω–æ–ª—É–ª—É, –¢–∞–∏—Ç–∏)" },
    { value: -9, label: "UTC -09:00 (–ê–ª—è—Å–∫–∞, –ì–∞–º–±–∏–µ—Ä)" },
    { value: -8, label: "UTC -08:00 (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å, –í–∞–Ω–∫—É–≤–µ—Ä)" },
    { value: -7, label: "UTC -07:00 (–î–µ–Ω–≤–µ—Ä, –§–µ–Ω–∏–∫—Å)" },
    { value: -6, label: "UTC -06:00 (–ß–∏–∫–∞–≥–æ, –ú–µ—Ö–∏–∫–æ)" },
    { value: -5, label: "UTC -05:00 (–ù—å—é-–ô–æ—Ä–∫, –ë–æ–≥–æ—Ç–∞, –õ–∏–º–∞)" },
    { value: -4, label: "UTC -04:00 (–ö–∞—Ä–∞–∫–∞—Å, –°–∞–Ω—Ç—å—è–≥–æ)" },
    { value: -3, label: "UTC -03:00 (–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å, –ë—Ä–∞–∑–∏–ª–∏–∞)" },
    { value: -2, label: "UTC -02:00 (–°—Ä–µ–¥–Ω–µ–∞—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è)" },
    { value: -1, label: "UTC -01:00 (–ê–∑–æ—Ä—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞)" },
    { value: 0, label: "UTC 00:00 (–õ–æ–Ω–¥–æ–Ω, –õ–∏—Å—Å–∞–±–æ–Ω)" },
    { value: 1, label: "UTC +01:00 (–ü–∞—Ä–∏–∂, –ë–µ—Ä–ª–∏–Ω)" },
    { value: 2, label: "UTC +02:00 (–ö–∏–µ–≤, –ê—Ñ–∏–Ω—ã)" },
    { value: 3, label: "UTC +03:00 (–ú–æ—Å–∫–≤–∞)" },
    { value: 4, label: "UTC +04:00 (–î—É–±–∞–π, –°–∞–º–∞—Ä–∞)" },
    { value: 5, label: "UTC +05:00 (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ö–∞—Ä–∞—á–∏)" },
    { value: 6, label: "UTC +06:00 (–û–º—Å–∫, –ê–ª–º–∞—Ç—ã)" },
    { value: 7, label: "UTC +07:00 (–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –ë–∞–Ω–≥–∫–æ–∫)" },
    { value: 8, label: "UTC +08:00 (–ò—Ä–∫—É—Ç—Å–∫, –ü–µ–∫–∏–Ω)" },
    { value: 9, label: "UTC +09:00 (–Ø–∫—É—Ç—Å–∫, –¢–æ–∫–∏–æ)" },
    { value: 10, label: "UTC +10:00 (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –°–∏–¥–Ω–µ–π)" },
    { value: 11, label: "UTC +11:00 (–ú–∞–≥–∞–¥–∞–Ω)" },
    { value: 12, label: "UTC +12:00 (–ö–∞–º—á–∞—Ç–∫–∞, –§–∏–¥–∂–∏)" },
  ];
  useEffect(() => {
    
    isMounted.current = true;
    return () => { isMounted.current = false; };
  }, []);
  /*useEffect(() => {
    const getDeviceIp = async () => {
      const storedIp = await AsyncStorage.getItem("selectedDevice");
      if (!storedIp) {
        console.error("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ!");
        return;
      }
      setDeviceIp(storedIp);
    };
  
    getDeviceIp();
  }, []);*/
  useFocusEffect(
    React.useCallback(() => {
      if (!deviceIp) {
        Alert.alert("–û—à–∏–±–∫–∞", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é.");
        navigation.navigate("MainTabs", { screen: "Home" });

        return;
      }

      setLoading(true);
      Promise.all([
        fetchSchedule(),
        fetchCurrentTime(),
        fetchAutoModeState(),
        loadDeviceInfo(),
        fetchPresenceSensorState(),
      ])
        .then(() => setLoading(false))
        .catch(() => setLoading(false));
    }, [deviceIp])
  );

  // üóì –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ (0-6) –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  const parseWeekday = (dayNumber: number) => {
    return weekdaysController[dayNumber] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  };
  
  //–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏
  const checkFirmwareVersion = async () => {
  if (!deviceIp) return;

  if (isDemoMode) {
    // üîß –í–µ—Ç–∫–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
    console.log("üß™ –î–µ–º–æ-—Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏");
    setFirmwareVersion("1.0.0-demo");
    setLatestFirmwareVersion("1.1.0-demo");
    setFirmwareModalVisible(true);
    return;
  }

  try {
    const res = await fetch(`http://${deviceIp}/getFirmwareVersion`);
    const data = await res.json();
    const currentVersion = data.version;
    setFirmwareVersion(currentVersion);

    const versionRes = await fetch(`https://storage.yandexcloud.net/firmware-updates/firmware_version.txt`);
    const latestVersion = (await versionRes.text()).trim();
    setLatestFirmwareVersion(latestVersion);

    setFirmwareModalVisible(true);
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—à–∏–≤–∫–∏:", error);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ—à–∏–≤–∫–∏.");
  }
};
  
  //–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
  const updateFirmware = async () => {
  if (isDemoMode) {
    console.log("üß™ –î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
    Alert.alert("–î–µ–º–æ-—Ä–µ–∂–∏–º", "–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
    return;
  }

  if (!deviceIp) return;
  setUpdating(true);

  try {
    const response = await fetch(`http://${deviceIp}/updateFirmware`, {
      method: "POST",
    });

    if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);

    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");

    setTimeout(() => {
      setUpdating(false);
      Alert.alert("–ì–æ—Ç–æ–≤–æ", "–ü—Ä–æ—à–∏–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ.");
    }, 10000);
  } catch (err) {
    console.error("‚õî –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
    setUpdating(false);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É.");
  }
};

  
  const fetchWithTimeout = (url: string, timeout: number = 2000): Promise<Response> => {
    return Promise.race([
      fetch(url),
      new Promise<Response>((_, reject) => setTimeout(() => reject(new Error("Timeout")), timeout)),
    ]);
  };


  const waitForDeviceToComeBack = () => {
    const retryInterval = setInterval(async () => {
      try {
        const res = await fetchWithTimeout(`http://${deviceIp}/getFirmwareVersion`, 2000);
        if (res.ok) {
          const data = await res.json();
          setFirmwareVersion(data.version);
          setUpdating(false);
  
          // üü¢ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å—ã
          startListeningForUpdates();
          fetchAutoModeState();
          fetchCurrentTime();
          fetchSchedule();
          fetchPresenceSensorState();
  
          clearInterval(retryInterval);
          updateIntervalRef.current = null;
  
          Alert.alert("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.");
        }
      } catch (e) {
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      }
    }, 3000);
  
    updateIntervalRef.current = retryInterval;
  };
  
  
  
  

  // üì° –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (—á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å 00:00)
  const formatTime = (date: Date | string): string => {
    if (typeof date === "string") {
      console.log("‚è∞ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É:", date);
      const parts = date.split(":");
      if (parts.length !== 2) return "00:00";

      const hours = parts[0].padStart(2, "0");
      const minutes = parts[1].padStart(2, "0");

      return `${hours}:${minutes}`;
    }

    if (!(date instanceof Date)) {
      console.warn("‚ùå formatTime: –ø–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø!", date);
      return "00:00";
    }

    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");
    return `${hours}:${minutes}`;
  };
  const startListeningForUpdates = () => {
    if (socketRef.current) return;

    const socket = dgram.createSocket({ type: "udp4", reusePort: true });
    socket.bind(4210);

    socket.on("message", (msg, rinfo) => {
      try {
        const message = msg.toString().trim();
        console.log(`üì° [UDP] –ü–æ–ª—É—á–µ–Ω–æ: ${message} –æ—Ç ${rinfo.address}`);

        if (message.startsWith("ESP_KEEP_ALIVE")) {
          console.log("‚ö†Ô∏è [UDP] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º KEEP_ALIVE —Å–æ–æ–±—â–µ–Ω–∏–µ.");
          return;
        }

        if (!message.startsWith("{")) {
          console.warn("‚ö†Ô∏è [UDP] –ü–æ–ª—É—á–µ–Ω–æ –ù–ï JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", message);
          return;
        }

        console.log("üßê [DEBUG] –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:", message);
        const data = JSON.parse(message);
        console.log("üì° [UDP] –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data);

        if (deviceIp && data.ip !== deviceIp) return;

        if (data.deviceName) setDeviceName(data.deviceName);
        if (data.deviceLocation) setDeviceLocation(data.deviceLocation);
        if ("autoMode" in data) setAutoMode(data.autoMode);

        if (data.schedule && Array.isArray(data.schedule)) {
          const newSchedule: { [key: string]: { start: Date; end: Date; enabled: boolean } } = {};
          data.schedule.forEach((entry: { start: string; end: string; enabled: boolean }, index: number) => {
            if (index >= weekdaysController.length) return;

            if (typeof entry.start !== "string" || typeof entry.end !== "string" || typeof entry.enabled !== "boolean") {
              console.warn(`‚ö†Ô∏è [UDP] –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –¥–Ω—è ${index}:`, entry);
              return;
            }

            const startTime = new Date(`2000-01-01T${entry.start}:00`);
            const endTime = new Date(`2000-01-01T${entry.end}:00`);

            newSchedule[weekdaysController[index]] = {
              start: startTime,
              end: endTime,
              enabled: entry.enabled,
            };
          });

          setSchedule(newSchedule);
          console.log("‚úÖ [UDP] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", newSchedule);
        }

        console.log("‚úÖ [UDP] –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");

      } catch (error) {
        if (error instanceof Error) {
          console.error("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP:", error.stack || error.message);
        } else {
          console.error("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏", JSON.stringify(error));
        }
      }
    });

    socket.on("error", (err) => {
      console.error("‚õî –û—à–∏–±–∫–∞ UDP:", err);
      socket.close();
      socketRef.current = null;
    });

    socketRef.current = socket;
  };

  useEffect(() => {
    startListeningForUpdates();
    return () => {
      if (socketRef.current) {
        socketRef.current.close();
        socketRef.current = null;
      }
    };
  }, [deviceIp]);





  // üü¢ –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    startListeningForUpdates();
    return () => {
      if (socketRef.current) {
        socketRef.current.close();
        socketRef.current = null;
      }
    };
  }, [deviceIp]);



  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ —Ä–µ–∂–∏–º–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
const fetchAutoModeState = async () => {
  if (!deviceIp) return;

  if (isDemoMode) {
    // üîß –î–µ–º–æ-—Ä–µ–∂–∏–º ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ñ–µ–π–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    console.log("üß™ –î–µ–º–æ-—Ä–µ–∂–∏–º: –ø–æ–ª—É—á–µ–Ω–∏–µ autoMode");
    if (isMounted.current) {
      setAutoMode(true); // –∏–ª–∏ false, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    }
    return;
  }

  try {
    const res = await fetch(`http://${deviceIp}/getAutoMode`);
    const data = await res.json();

    if (isMounted.current && data && "autoMode" in data) {
      setAutoMode(data.autoMode);
    }
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ autoMode:", error);
  }
};



  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
const updateAutoMode = async (newValue: boolean) => {
  if (!deviceIp) return;

  if (isDemoMode) {
    // üîß –î–µ–º–æ-—Ä–µ–∂–∏–º: –∏–º–∏—Ç–∏—Ä—É–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
    console.log(`üß™ –î–µ–º–æ-—Ä–µ–∂–∏–º: autoMode=${newValue}`);
    setAutoMode(newValue);
    return;
  }

  const stateStr = newValue ? "on" : "off"; // ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–∂–∏–¥–∞–µ—Ç "on" –∏–ª–∏ "off"
  console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º autoMode=${stateStr} –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (POST)...`);

  try {
    const response = await fetch(`http://${deviceIp}/setAutoMode`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `state=${stateStr}`,
    });

    if (!response.ok) {
      console.error(`‚õî –û—à–∏–±–∫–∞ HTTP ${response.status}: ${response.statusText}`);
      return;
    }

    console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º ${newValue ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù"}`);
    await fetchAutoModeState(); // ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ autoMode:", error);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º.");
  }
};



  // üü¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
const fetchSchedule = async () => {
  if (!deviceIp) return;

  // ‚úÖ –î–ï–ú–û-–†–ï–ñ–ò–ú
  if (isDemoMode) {
    console.log("üß™ –î–µ–º–æ-—Ä–µ–∂–∏–º: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");

    const fakeSchedule: Record<string, { start: Date; end: Date; enabled: boolean }> = {};
    weekdaysController.forEach((day, index) => {
      fakeSchedule[day] = {
        start: new Date(`2000-01-01T0${index + 6}:00:00`), // 06:00, 07:00 –∏ —Ç.–¥.
        end: new Date(`2000-01-01T0${index + 8}:00:00`),   // 08:00, 09:00 –∏ —Ç.–¥.
        enabled: index % 2 === 0, // –≤–∫–ª—é—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ –¥–Ω–∏
      };
    });

    if (isMounted.current) {
      setSchedule(fakeSchedule);
    }

    return;
  }

  // ‚úÖ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  try {
    const res = await fetch(`http://${deviceIp}/getSchedule`);
    const data: { schedule: ScheduleEntry[] } = await res.json();

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", JSON.stringify(data.schedule, null, 2));

    if (!data.schedule || !Array.isArray(data.schedule)) {
      throw new Error("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞");
    }

    const newSchedule: Record<string, { start: Date; end: Date; enabled: boolean }> = {};

    data.schedule.forEach((entry, index) => {
      if (index >= weekdaysController.length) return;

      const controllerDay = weekdaysController[index];

      newSchedule[controllerDay] = {
        start: new Date(`2000-01-01T${entry.start}:00`),
        end: new Date(`2000-01-01T${entry.end}:00`),
        enabled: entry.enabled ?? false,
      };
    });

    if (isMounted.current) {
      setSchedule(newSchedule);
    }
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
  }
};





  // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ ESP32 –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
const sendScheduleToESP32 = async (
  updatedSchedule: Record<string, { start: Date; end: Date; enabled: boolean }>
) => {
  if (!deviceIp) return;

  // ‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
  if (isDemoMode) {
    console.log("üß™ –î–ï–ú–û: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", updatedSchedule);
    return;
  }

  try {
    const scheduleParams = Object.entries(updatedSchedule)
      .map(([day, entry], i) => {
        const start = formatTime(entry.start);
        const end = formatTime(entry.end);
        const enabled = entry.enabled ? "true" : "false";

        return `start${i}=${start}&end${i}=${end}&enabled${i}=${enabled}`;
      })
      .join("&");

    if (scheduleParams.length === 0) return;

    console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä:", scheduleParams);
    await fetch(`http://${deviceIp}/setSchedule?${scheduleParams}`, { method: "GET" });

    console.log("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ");
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
  }
};




  // ‚úÖ –í—ã–∑–æ–≤ `sendScheduleToESP32` —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  useEffect(() => {
  if (!isDemoMode && Object.keys(schedule).length > 0) {
    sendScheduleToESP32(schedule);
  } else if (isDemoMode) {
    console.log("üß™ –î–ï–ú–û: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (useEffect):", schedule);
  }
}, [schedule]);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ UI –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ESP32
  const updateScheduleEntry = (day: string, key: "start" | "end" | "enabled", value: any) => {
  setSchedule((prevSchedule) => {
    const updatedSchedule = {
      ...prevSchedule,
      [day]: { ...prevSchedule[day], [key]: value },
    };

    // üîß –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–µ–º–æ
    if (!isDemoMode) {
      sendScheduleToESP32(updatedSchedule);
    } else {
      console.log("üß™ [–î–µ–º–æ] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ UI:", updatedSchedule);
    }

    return updatedSchedule;
  });
};


  // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–Ω—è (—Å–≤–∏—Ç—á)
  const toggleDayEnabled = (day: string) => {
    updateScheduleEntry(day, "enabled", !schedule[day].enabled);
  };

  // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
  const updateStartTime = (day: string, time: Date) => {
    updateScheduleEntry(day, "start", time);
  };

  // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const updateEndTime = (day: string, time: Date) => {
    updateScheduleEntry(day, "end", time);
  };


  // üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏/–ª–æ–∫–∞—Ü–∏–∏
  const openModal = (type: "name" | "location") => {
    setModalType(type);
    setInputValue(type === "name" ? deviceName : deviceLocation);
    setModalVisible(true);
  };
  //–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω–∏ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  const loadDeviceInfo = async () => {
  if (!deviceIp) return;

  if (isDemoMode) {
    // üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    setDeviceName("–¢–µ—Å—Ç–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ");
    setDeviceLocation("–¢–µ—Å—Ç–æ–≤–∞—è –∑–æ–Ω–∞");
    setTimezone(3);
    console.log("üß™ –î–ï–ú–û: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
    return;
  }

  try {
    const res = await fetch(`http://${deviceIp}/getDeviceInfo`);
    const data = await res.json();

    if (data.device_name) setDeviceName(data.device_name);
    if (data.device_location) setDeviceLocation(data.device_location);
    if (data.timezone) setTimezone(data.timezone);

    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data);
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", error);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.");
  }
};


  useEffect(() => {
  if (isDemoMode) return; // üß™ –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –Ω–µ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

  const interval = setInterval(fetchCurrentTime, 5000);
  return () => clearInterval(interval);
}, [deviceIp, isDemoMode]);


  // üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const saveChanges = async () => {
  if (!modalType) return;
  Keyboard.dismiss();

  if (isDemoMode) {
    console.log("üß™ [–î–µ–º–æ-—Ä–µ–∂–∏–º] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ:", inputValue);
    if (modalType === "name") setDeviceName(inputValue);
    if (modalType === "location") setDeviceLocation(inputValue);
    setModalVisible(false);
    return;
  }

  if (!deviceIp) return;

  try {
    const key = modalType === "name" ? "device_name" : "device_location";
    await fetch(`http://${deviceIp}/setDeviceInfo`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `${key}=${encodeURIComponent(inputValue)}`,
    });

    if (isMounted.current) {
      if (modalType === "name") setDeviceName(inputValue);
      if (modalType === "location") setDeviceLocation(inputValue);
      setModalVisible(false);
    }
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
  }
};


  //–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  const updateTimezone = async (tz: number) => {
  setTimezone(tz);

  if (isDemoMode) {
    console.log("üß™ [–î–µ–º–æ-—Ä–µ–∂–∏–º] –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω:", tz);
    return;
  }

  try {
    await fetch(`http://${deviceIp}/setTimezone`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `timezone=${tz}`,
    });
  } catch (error) {
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.");
  }
};

  //–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  const fetchCurrentTime = async () => {
  if (isDemoMode) {
    const now = new Date();
    const demoTime = now.toTimeString().slice(0, 5); // hh:mm
    const demoDay = weekdaysController[now.getDay()];

    setCurrentTime(demoTime);
    setCurrentDay(demoDay);

    console.log("üß™ [–î–µ–º–æ-—Ä–µ–∂–∏–º] –í—Ä–µ–º—è:", demoTime, "| –î–µ–Ω—å:", demoDay);
    return;
  }

  if (!deviceIp) return;

  try {
    const res = await fetch(`http://${deviceIp}/getTime`);
    const data = await res.json();

    if (data.time) {
      setCurrentTime(formatTime(data.time));
    }

    if (data.day !== undefined) {
      const dayIndex = parseInt(data.day, 10);
      if (!isNaN(dayIndex) && dayIndex >= 0 && dayIndex < weekdaysController.length) {
        setCurrentDay(weekdaysController[dayIndex]);
      } else {
        setCurrentDay("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
      }
    }
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:", error);
  }
};



  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
  const fetchPresenceSensorState = async () => {
  if (isDemoMode) {
    console.log("üß™ [–î–µ–º–æ-—Ä–µ–∂–∏–º] –ü–æ–ª—É—á–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è...");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    setPresenceSensorEnabled(true);
    setPresenceTimeout(5); // 5 –º–∏–Ω—É—Ç

    return;
  }

  if (!deviceIp) return;

  try {
    console.log(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —É ${deviceIp}...`);
    const res = await fetch(`http://${deviceIp}/getPresenceSensor`);
    const data = await res.json();

    if ("enabled" in data) setPresenceSensorEnabled(data.enabled);
    if ("timeout" in data) {
      const timeoutInMinutes = Math.round(data.timeout / 60); // üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
      setPresenceTimeout(Math.max(1, timeoutInMinutes)); // –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
    }

    console.log(`‚úÖ [ESP] –î–∞—Ç—á–∏–∫: ${data.enabled ? "–í–ö–õ" : "–í–´–ö–õ"}, —Ç–∞–π–º–∞—É—Ç: ${data.timeout} —Å–µ–∫`);
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞:", error);
  }
};


  // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–∏—Ç—á–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ + –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
  const togglePresenceSensor = async () => {
  const newEnabled = !presenceSensorEnabled; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  setPresenceSensorEnabled(newEnabled); // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É

  if (isDemoMode) {
    console.log(`üß™ [–î–µ–º–æ-—Ä–µ–∂–∏–º] –ú–µ–Ω—è–µ–º –¥–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ ${newEnabled ? "–í–ö–õ" : "–í–´–ö–õ"}`);
    return;
  }

  if (!deviceIp) return;

  console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: –î–∞—Ç—á–∏–∫ = ${newEnabled ? "–í–ö–õ" : "–í–´–ö–õ"}`);
  try {
    const response = await fetch(`http://${deviceIp}/setPresenceSensor`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `enabled=${newEnabled ? "true" : "false"}&timeout=${presenceTimeout * 60}`, // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP ${response.status}`);
    }

    console.log(`‚úÖ –î–∞—Ç—á–∏–∫ ${newEnabled ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù"}`);
    fetchPresenceSensorState(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    setPresenceSensorEnabled(!newEnabled); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞.");
  }
};


  const updatePresenceTimeout = async (value: number) => {
  setPresenceTimeout(value); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  const timeoutInSeconds = value * 60;

  if (isDemoMode) {
    console.log(`üß™ [–î–µ–º–æ-—Ä–µ–∂–∏–º] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç ${value} –º–∏–Ω (${timeoutInSeconds} —Å–µ–∫)`);
    return;
  }

  if (!deviceIp) return;

  console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç ${value} –º–∏–Ω (${timeoutInSeconds} —Å–µ–∫) –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä`);

  try {
    const response = await fetch(`http://${deviceIp}/setPresenceSensor`, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: `enabled=${presenceSensorEnabled ? "true" : "false"}&timeout=${timeoutInSeconds}`,
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ HTTP ${response.status}`);
    }

    console.log(`‚úÖ –¢–∞–π–º–∞—É—Ç –¥–∞—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${value} –º–∏–Ω`);
    fetchPresenceSensorState(); // üîÑ –ü–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  } catch (error) {
    console.error("‚õî –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞:", error);
    Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∞—É—Ç.");
  }
};




  useEffect(() => {
    fetchCurrentTime();
    const interval = setInterval(fetchCurrentTime, 10000);
    return () => clearInterval(interval);
  }, [deviceIp]);

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={{ flexGrow: 1, paddingBottom: 20 }}>
        <Text style={styles.header}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Text>

        {loading ? (
          <ActivityIndicator size="large" color="#f9c154" style={styles.loadingIndicator} />
        ) : (
          <>
            {/* üîπ –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            <View style={styles.settingsBlock}>
              {/* üîπ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ */}
              <View style={styles.row}>
                <Text style={styles.label}>–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</Text>
              </View>
              <View style={{ flexDirection: "row", alignItems: "center" }}>
                <Text style={styles.value}>{deviceName}</Text>
                <TouchableOpacity onPress={() => openModal("name")}>
                  <Icon name="pencil-sharp" size={20} color="#f9c154" />
                </TouchableOpacity>
              </View>

              {/* üîπ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
              <View style={styles.row}>
                <Text style={styles.label}>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</Text>
              </View>
              <View style={{ flexDirection: "row", alignItems: "center" }}>
                <Text style={styles.value}>{deviceLocation}</Text>
                <TouchableOpacity onPress={() => openModal("location")}>
                  <Icon name="pencil-sharp" size={20} color="#f9c154" />
                </TouchableOpacity>
              </View>

              {/* üîπ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å */}
              <Text style={styles.label}>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</Text>
              <Picker selectedValue={timezone} onValueChange={updateTimezone}>
                {timezones.map((tz) => (
                  <Picker.Item key={tz.value} label={tz.label} value={tz.value} />
                ))}
              </Picker>
              


<Modal transparent visible={firmwareModalVisible} animationType="fade">
  <TouchableWithoutFeedback onPress={() => Keyboard.dismiss()}>
    <View style={styles.modalContainer}>
      <View style={styles.modalContent}>
        <Text style={styles.modalTitle}>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏</Text>

        {updating ? (
          <>
            <Text style={{ color: "#EAEAEA", marginBottom: 10 }}>–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</Text>
            <ActivityIndicator size="large" color="#f9c154" />
          </>
        ) : (
          <>
            <Text style={{ color: "#EAEAEA", marginBottom: 10 }}>
              –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {firmwareVersion || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
            </Text>
            <Text style={{ color: "#EAEAEA", marginBottom: 20 }}>
              –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {latestFirmwareVersion || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
            </Text>

            {firmwareVersion !== latestFirmwareVersion ? (
              <>
                <TouchableOpacity
                  onPress={() => {
                    updateFirmware(); // –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                  }}
                  style={styles.updateButton}
                >
                  <Text style={styles.buttonText}>–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  onPress={() => setFirmwareModalVisible(false)}
                  style={styles.exitButton}
                >
                  <Text style={styles.exitButtonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
                </TouchableOpacity>
              </>
            ) : (
              <TouchableOpacity
                onPress={() => setFirmwareModalVisible(false)}
                style={styles.exitButton}
              >
                <Text style={styles.exitButtonText}>OK</Text>
              </TouchableOpacity>
            )}
          </>
        )}
      </View>
    </View>
  </TouchableWithoutFeedback>
</Modal>



              {/* üîπ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ */}
              <Text style={styles.label}>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</Text>
              <View style={{ flexDirection: "row", alignItems: "center" }}>
                <Text style={styles.timeText}>{formatTime(currentTime)}</Text>
                <Text style={[styles.timeText, styles.weekdayText]}> {currentDay}</Text>
              </View>
              <Text style={styles.label}>–ü—Ä–æ—à–∏–≤–∫–∞</Text>

              <TouchableOpacity onPress={checkFirmwareVersion} style={styles.button}>
  <Text style={styles.buttonText}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ—à–∏–≤–∫–∏</Text>
</TouchableOpacity> 
              {/* üîπ –î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è */}
              <View style={styles.row}>
                <Text style={styles.label}>–î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è</Text>
                <Switch
                  value={presenceSensorEnabled}
                  onValueChange={togglePresenceSensor}
                  thumbColor={presenceSensorEnabled ? "#f9c154" : "#666"}
                  trackColor={{ false: "#282A36", true: "#f9c154" }}
                  ios_backgroundColor="#282A36"
                />
              </View>

              {/* üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç—á–∏–∫ –í–ö–õ) */}
              {presenceSensorEnabled && (
                <View style={[styles.row, { justifyContent: "space-between", alignItems: "center" }]}>
                  <Text style={styles.label}>–í—ã–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑:</Text>

                  <View style={styles.stepperContainer}>
                    {/* üîπ –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ */}
                    <TouchableOpacity
                      style={styles.stepperButton}
                      onPress={() => {
                        const newTimeout = Math.max(1, presenceTimeout - 1);
                        setPresenceTimeout(newTimeout);
                        updatePresenceTimeout(newTimeout);
                      }}
                    >
                      <Text style={styles.stepperText}>‚àí</Text>
                    </TouchableOpacity>

                    {/* üîπ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è */}
                    <Text style={styles.stepperValue}>{presenceTimeout} –º–∏–Ω</Text>

                    {/* üîπ –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ */}
                    <TouchableOpacity
                      style={styles.stepperButton}
                      onPress={() => {
                        const newTimeout = presenceTimeout + 1;
                        setPresenceTimeout(newTimeout);
                        updatePresenceTimeout(newTimeout);
                      }}
                    >
                      <Text style={styles.stepperText}>+</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              )}

              {/* üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º */}
              <View style={styles.row}>
                <Text style={styles.label}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</Text>
                <Switch
                  value={autoMode}
                  onValueChange={(newValue) => {
                    setAutoMode(newValue); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É
                    updateAutoMode(newValue); // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                  }}
                  thumbColor={autoMode ? "#f9c154" : "#666"}
                  trackColor={{ false: "#282A36", true: "#f9c154" }}
                  ios_backgroundColor="#282A36"
                />
              </View>
            </View>

            {/* üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
            <Modal transparent visible={modalVisible}>
              <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
                <View style={styles.modalContainer}>
                  <View style={styles.modalContent}>
                    <Text style={styles.modalTitle}>
                      {modalType === "name" ? "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è" : "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"}
                    </Text>
                    <TextInput
                      style={styles.modalInput}
                      value={inputValue}
                      onChangeText={setInputValue}
                      autoFocus
                    />
                    <View style={styles.modalButtons}>
                      <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.cancelButton}>
                        <Text>–û—Ç–º–µ–Ω–∞</Text>
                      </TouchableOpacity>
                      <TouchableOpacity onPress={saveChanges} style={styles.saveButton}>
                        <Text>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              </TouchableWithoutFeedback>
            </Modal>

            {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
{autoMode && (
  <View style={styles.scheduleContainer}>
    <Text style={styles.scheduleHeader}>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</Text>
    {[...weekdaysController.slice(1), weekdaysController[0]].map((day) => {
      const scheduleEntry = schedule[day];

      return (
        <TouchableOpacity
          key={day}
          style={[
            styles.scheduleRow,
            scheduleEntry?.enabled ? styles.activeDay : styles.inactiveDay,
          ]}
          onPress={() => {
            if (!scheduleEntry) return;
            toggleDayEnabled(day);
          }}
        >
          <View style={styles.dayBlock}>
            <Text
              style={[
                styles.scheduleDay,
                { color: scheduleEntry?.enabled ? "#000" : "#EAEAEA" },
              ]}
            >
              {day}
            </Text>
          </View>

          <View style={styles.timeBlock}>
            <TouchableOpacity
              style={styles.timeButton}
              onPress={() => {
                if (!scheduleEntry) return;
                setSelectedDay(day);
                setPickerType("start");
                setPickerVisible(true);
              }}
            >
              <Text style={styles.timeTextSchedule}>
                {scheduleEntry?.start ? formatTime(scheduleEntry.start) : "00:00"}
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.timeButton}
              onPress={() => {
                if (!scheduleEntry) return;
                setSelectedDay(day);
                setPickerType("end");
                setPickerVisible(true);
              }}
            >
              <Text style={styles.timeTextSchedule}>
                {scheduleEntry?.end ? formatTime(scheduleEntry.end) : "00:00"}
              </Text>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      );
    })}
  </View>
)}

{/* üîπ –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
<DatePicker
  modal
  open={pickerVisible}
  date={
    selectedDay && schedule[selectedDay] && schedule[selectedDay][pickerType]
      ? schedule[selectedDay][pickerType]
      : new Date()
  }
  mode="time"
  title="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è"
  confirmText="–û–ö"
  cancelText="–û—Ç–º–µ–Ω–∞"
  theme="dark"
  is24hourSource="locale"
  onConfirm={(selectedTime) => {
    if (selectedDay) {
      const newSchedule = {
        ...schedule,
        [selectedDay]: {
          ...schedule[selectedDay],
          [pickerType]: selectedTime,
        },
      };

      setSchedule(newSchedule);

      if (!isDemoMode) {
        sendScheduleToESP32(newSchedule);
      } else {
        console.log("üß™ [–î–µ–º–æ] –í—ã–±—Ä–∞–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:", selectedTime);
      }
    }
    setPickerVisible(false);
  }}
  onCancel={() => setPickerVisible(false)}
/>


          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#1E1E2E", paddingTop: 50, padding: 10, paddingBottom: 0, },
  header: { fontSize: 24, fontWeight: "bold", textAlign: "center", color: "#EAEAEA", marginBottom: 10 },
  row: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 5 },
  label: { color: "#ccc", fontSize: 16, marginBottom: 5 },
  settingsBlock: { marginBottom: 10, borderWidth: 1, borderColor: "#374151", borderRadius: 10, padding: 10 },
  input: { backgroundColor: "#282A36", color: "#EAEAEA", padding: 10, borderRadius: 8, marginBottom: 10 },
  timeText: { color: "#f9c154", fontSize: 18, marginBottom: 20 },
  switchContainer: { flexDirection: "row", justifyContent: "space-between", alignItems: "center", marginBottom: 20 },
  modalContainer: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0,0,0,0.6)" },
  modalContent: { width: "80%", backgroundColor: "#282A36", padding: 20, borderRadius: 10, alignItems: "center" },
  modalTitle: { fontSize: 20, color: "#f9c154", fontWeight: "bold", marginBottom: 10 },
  modalInput: { width: "100%", backgroundColor: "#282A36", color: "#EAEAEA", padding: 10, borderRadius: 8, fontSize: 18 },
  modalButtons: { flexDirection: "row", justifyContent: "space-between", width: "100%", marginTop: 15 },
  cancelButton: { flex: 1, padding: 10, backgroundColor: "#EAEAEA", borderRadius: 8, alignItems: "center", marginRight: 5 },
  saveButton: { flex: 1, padding: 10, backgroundColor: "#f9c154", borderRadius: 8, alignItems: "center", marginLeft: 5 },
  buttonText: { fontSize: 16, fontWeight: "bold" },
  value: { fontSize: 18, color: "#EAEAEA", fontWeight: "bold", marginBottom: 10 },
  timeInput: { backgroundColor: "#282A36", color: "#EAEAEA", padding: 5, borderRadius: 5, width: 60, textAlign: "center" },
  scheduleContainer: { padding: 10, backgroundColor: "#1E1E2E", borderRadius: 10, borderWidth: 1, borderColor: "#374151" },
  scheduleHeader: { fontSize: 18, color: "#f9c154", fontWeight: "bold", marginBottom: 10, textAlign: "center" },
  weekdayText: { color: "#f9c154", fontSize: 18, },
  scheduleRow: { flexDirection: "row", alignItems: "center", justifyContent: "space-between", paddingVertical: 8, paddingHorizontal: 10, borderRadius: 8, marginBottom: 5, minHeight: 40 },
  activeDay: { backgroundColor: "#f9c154", },
  inactiveDay: { backgroundColor: "#282A36", },
  dayBlock: { flex: 1, },
  timeBlock: { flexDirection: "row", justifyContent: "flex-end", alignItems: "center", flex: 1.2, },
  scheduleDay: { color: "#EAEAEA", fontSize: 16, fontWeight: "bold", },
  timeButton: { backgroundColor: "#282A36", padding: 10, borderRadius: 5, marginLeft: 5, },
  timeTextSchedule: { color: "#f9c154", fontSize: 16, fontWeight: "bold", },
  loadingIndicator: { flex: 1, justifyContent: "center", alignItems: "center", marginTop: 20 },
  stepperContainer: { flexDirection: "row", alignItems: "center", justifyContent: "center", marginVertical: 10, },
  stepperButton: { backgroundColor: "#1E1E2E", borderRadius: 10, width: 40, height: 40, justifyContent: "center", alignItems: "center", marginHorizontal: 10, },
  stepperText: { fontSize: 24, fontWeight: "bold", color: "#f9c154", },
  stepperValue: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#EAEAEA",
    minWidth: 50,
    textAlign: "center",
  },
  button: {
    backgroundColor: "#f9c154",
    padding: 10,
    borderRadius: 8,
    alignItems: "center",
    marginVertical: 5,
  },
  updateButton: {
    backgroundColor: "#f9c154",
    padding: 10,
    borderRadius: 8,
    alignItems: "center",
    marginVertical: 5,
  },
  versionText: {
    fontSize: 16,
    color: "#EAEAEA",
    textAlign: "center",
    marginVertical: 5,
  },
  exitButton: {
    backgroundColor: "#333", // –∏–ª–∏ "#282A36"
    padding: 10,
    borderRadius: 8,
    alignItems: "center",
    marginTop: 10,
    borderWidth: 1,
    borderColor: "#f9c154",
  },
  
  exitButtonText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#f9c154",
  },
  
  
});
