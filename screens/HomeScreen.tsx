import React, { useState, useEffect, useRef } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  Alert,
  ActivityIndicator} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useNavigation } from "@react-navigation/native"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useNavigation
import { NativeStackNavigationProp } from "@react-navigation/native-stack";
import dgram from "react-native-udp";
import { RootStackParamList } from "../AppNavigator"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∏–∑ AppNavigator

// ‚úÖ –¢–ò–ü –î–ê–ù–ù–´–• –£–°–¢–†–û–ô–°–¢–í–ê
type Device = {
  name: string;
  ip: string;
  location: string;
  status: string;
  lastSeen: number;
};

type HomeScreenProps = {
  updateSelectedDevice: (deviceIp: string) => void;
};

const HomeScreen = ({ updateSelectedDevice }: HomeScreenProps) => {
  
  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const [devices, setDevices] = useState<Device[]>([]);
  const [selectedDevice, setSelectedDevice] = useState<string | null>(null);
  const devicesRef = useRef<Device[]>([]); // ‚úÖ –•—Ä–∞–Ω–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const [searchStatus, setSearchStatus] = useState<string>("");
  const [isScanning, setIsScanning] = useState<boolean>(false);
  const [subnet, setSubnet] = useState<string | null>(null);
  const socketRef = useRef<ReturnType<typeof dgram.createSocket> | null>(null);
  const selectDevice = async (deviceIp: string) => {
    if (!deviceIp) {
      showDeviceNotSelectedAlert();
      return;
    }

    updateSelectedDevice(deviceIp); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    setSelectedDevice(deviceIp); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    navigation.navigate("Modes", { deviceIp }); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω Modes
};
// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
useEffect(() => {
  AsyncStorage.removeItem("selectedDevice");
  setSelectedDevice(null);
  loadDevices();
}, []);


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
useEffect(() => {
  const interval = setInterval(() => {
    setDevices((prevDevices) => {
      // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å Online/Offline
      const updatedDevices = prevDevices.map((device) => ({
        ...device,
        status: Date.now() - device.lastSeen > 10000 ? "Offline" : "Online",
      }));

      // üîπ –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É (Online ‚Üí Offline), –Ω–æ –Ω–µ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
      updatedDevices.sort((a, b) => {
        if (a.status === b.status) return 0; // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        return a.status === "Online" ? -1 : 1; // Online –≤—ã—à–µ, Offline –Ω–∏–∂–µ
      });

      return updatedDevices;
    });
  }, 5000);

  return () => clearInterval(interval);
}, []);

  
    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
useEffect(() => {
    const loadSelectedDevice = async () => {
      const storedDeviceIp = await AsyncStorage.getItem("selectedDevice");
      if (storedDeviceIp) setSelectedDevice(storedDeviceIp);
    };
    loadSelectedDevice();
  }, []);
  useEffect(() => {
    const socket = dgram.createSocket({ type: "udp4", reusePort: true });
   
    socket.bind(4210);
  
    socket.on("message", (msg, rinfo) => {
      try {
        const message = msg.toString();
        console.log(`üì° [UDP] –ü–æ–ª—É—á–µ–Ω–æ: ${message} –æ—Ç ${rinfo.address}:${rinfo.port}`);
  
        if (message.startsWith("ESP_KEEP_ALIVE:")) {
          const deviceIp = message.split(":")[1];
  
          setDevices((prevDevices) =>
            prevDevices.map((device) =>
              device.ip === deviceIp
                ? { ...device, status: "Online", lastSeen: Date.now() }
                : device
            )
          );
        }
      } catch (error) {
        console.error("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP-—Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      }
    });
  
    socket.on("error", (err) => {
      console.error("‚õî –û—à–∏–±–∫–∞ UDP —Å–æ–∫–µ—Ç–∞:", err);
      socket.close();
    });
  
    return () => {
      socket.close();
    };
  }, []);
  
// üì° –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
const startListeningForDeviceInfoUpdates = () => {
  if (socketRef.current) {
    console.log("‚ö†Ô∏è –°–æ–∫–µ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ–≤—ã–π –Ω–µ —Å–æ–∑–¥–∞–µ–º.");
    return;
  }

  const socket = dgram.createSocket({ type: "udp4", reusePort: true });

  socket.bind(4210, () => {
    console.log("üü¢ [UDP Home] –°–æ–∫–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ—Ä—Ç—É 4210");
  });

  socket.on("message", (msg, rinfo) => {
    try {
      const message = msg.toString().trim();
      console.log(`üì° [UDP Home] –ü–æ–ª—É—á–µ–Ω–æ: ${message} –æ—Ç ${rinfo.address}`);

      // üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º KEEP_ALIVE —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.startsWith("ESP_KEEP_ALIVE")) {
        console.log("‚ö†Ô∏è [UDP Home] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º KEEP_ALIVE —Å–æ–æ–±—â–µ–Ω–∏–µ.");
        return;
      }

      // üßê –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ JSON
      if (!message.startsWith("{")) {
        console.warn("‚ö†Ô∏è [UDP Home] –ü–æ–ª—É—á–µ–Ω–æ –ù–ï JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:", message);
        return;
      }

      console.log("üßê [DEBUG Home] –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:", message);
      const data = JSON.parse(message);
      console.log("üì° [UDP Home] –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data);

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ IP, –∏–º—è –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π)
      if ("ip" in data && ("deviceName" in data || "deviceLocation" in data)) {
        console.log(`‚úÖ [UDP Home] –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${data.ip} | –ò–º—è: ${data.deviceName} | –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${data.deviceLocation}`);

        setDevices((prevDevices) => {
          const updatedDevices = prevDevices.map((device) => {
            if (device.ip === data.ip) {
              return {
                ...device,
                name: data.deviceName || device.name,
                location: data.deviceLocation || device.location,
                lastSeen: Date.now(),
              };
            }
            return device;
          });
          return [...updatedDevices];  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        });
        

        console.log("‚úÖ [UDP Home] –ò–º—è –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
      }
    } catch (error) {
      console.error("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP Home:", error instanceof Error ? error.stack || error.message : JSON.stringify(error));
    }
  });

  socket.on("error", (err) => {
    console.error("‚õî –û—à–∏–±–∫–∞ UDP Home:", err);
    if (socketRef.current) {
      try {
        socketRef.current.close();
      } catch (error) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–∫–µ—Ç–∞:", error);
      }
      socketRef.current = null;
    }
  });

  socketRef.current = socket;
};

// üü¢ –°—Ç–∞—Ä—Ç—É–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å UDP –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ HomeScreen
useEffect(() => {
  startListeningForDeviceInfoUpdates();

  return () => {
    if (socketRef.current) {
      console.log("üî¥ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏");
      try {
        socketRef.current.close();
      } catch (error) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–∫–µ—Ç–∞:", error);
      }
      socketRef.current = null;
    }
  };
}, []);
 // ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 const showDeviceNotSelectedAlert = () => {
  Alert.alert(
    "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ",
    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
    [{ text: "OK", onPress: () => console.log("OK Pressed") }],
    { cancelable: false }
  );
};
  // ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ AsyncStorage
  const loadDevices = async () => {
    try {
      const storedDevices = await AsyncStorage.getItem("devices");
      if (storedDevices) {
        const parsedDevices = JSON.parse(storedDevices);
        setDevices(parsedDevices);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", error);
    }
  };
  // ‚úÖ –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
const fetchDevices = async () => {
  if (isScanning) {
    console.log("‚ö†Ô∏è –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
    return;
  }

  setIsScanning(true);
  setSearchStatus("üì° –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏...");
  console.log("üì° –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å UDP-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ESP32...");

  const socket = dgram.createSocket({ type: "udp4", reusePort: true });

  socket.bind(4210);

  // üõë –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  let pendingDevices: Record<string, Device> = {};

  socket.on("message", async (msg, rinfo) => {
    try {
      const message = msg.toString();
      console.log(`üì° [UDP] –ü–æ–ª—É—á–µ–Ω–æ: ${message} –æ—Ç ${rinfo.address}:${rinfo.port}`);

      if (message.startsWith("ESP_KEEP_ALIVE:")) {
        const deviceIp = message.split(":")[1];

        setDevices((prevDevices) => {
          const existingDevice = prevDevices.find((dev) => dev.ip === deviceIp);

          if (existingDevice) {
            // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            const updatedDevices = prevDevices.map((device) =>
              device.ip === deviceIp ? { ...device, status: "Online", lastSeen: Date.now() } : device
            );
            AsyncStorage.setItem("devices", JSON.stringify(updatedDevices));
            return updatedDevices;
          } else {
            // üÜï –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ pending, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!pendingDevices[deviceIp]) {
              pendingDevices[deviceIp] = {
                ip: deviceIp,
                name: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                location: "–ó–∞–≥—Ä—É–∑–∫–∞...",
                status: "Online",
                lastSeen: Date.now(),
              };

              // üïê –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
              (async () => {
                try {
                  const response = await fetch(`http://${deviceIp}/getDeviceInfo`);
                  if (response.ok) {
                    const data = await response.json();
                    pendingDevices[deviceIp].name = data.deviceName || "ESP32";
                    pendingDevices[deviceIp].location = data.deviceLocation || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

                    // ‚úÖ –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –≤ devices
                    setDevices((currentDevices) => {
                      const finalDevices = [
                        ...currentDevices.filter((d) => d.ip !== deviceIp),
                        pendingDevices[deviceIp],
                      ];
                      AsyncStorage.setItem("devices", JSON.stringify(finalDevices));
                      return finalDevices;
                    });
                  }
                } catch (error) {
                  console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceIp}:`, error);
                }
              })();
            }
          }

          return prevDevices;
        });
      }
    } catch (error) {
      console.error("‚õî –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ UDP-—Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
  });

  socket.on("error", (err) => {
    console.error("‚õî –û—à–∏–±–∫–∞ UDP —Å–æ–∫–µ—Ç–∞:", err);
    socket.close();
  });

  setTimeout(() => {
    console.log("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.");
    setSearchStatus("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!");
    setIsScanning(false);
    socket.close();
    setTimeout(() => setSearchStatus(""), 5000);
  }, 15000);
};

  
const removeDevice = (ip: string) => {
  Alert.alert("–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?", [
    { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
    {
      text: "–£–¥–∞–ª–∏—Ç—å",
      style: "destructive",
      onPress: async () => {
        console.log("–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", ip);
        setDevices((prevDevices) => {
          const newDevices = prevDevices.filter((device) => device.ip !== ip);
          console.log("–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", newDevices);
          AsyncStorage.setItem("devices", JSON.stringify(newDevices));
          return newDevices;
        });
      },
    },
  ]);
};


  
  return (
    <View style={styles.container}>
      <Text style={styles.title}>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ v.1.0</Text>

      <TouchableOpacity style={styles.searchButton} onPress={fetchDevices} disabled={isScanning}>
        {isScanning ? <ActivityIndicator color="black" /> : <Text style={styles.searchButtonText}>üîç –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</Text>}
      </TouchableOpacity>

      {searchStatus ? <Text style={styles.statusText}>{searchStatus}</Text> : null}

      <View style={styles.devicesContainer}>
        <Text style={styles.devicesHeader}>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</Text>

        <FlatList
  data={devices}
  keyExtractor={(item) => item.ip}
  renderItem={({ item }) => (
    <View style={[styles.deviceCard, item.status === "Offline" && styles.deviceCardOffline, selectedDevice === item.ip && styles.deviceCardSelected,]}>
      
      {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (‚ùå) */}
      <TouchableOpacity
        style={styles.deleteButton}
        onPress={() => removeDevice(item.ip)}
      >
        <Text style={styles.deleteButtonText}>‚úñ</Text>
      </TouchableOpacity>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <TouchableOpacity
        style={styles.deviceInfoContainer}
        onPress={() => selectDevice(item.ip)}
        disabled={item.status === "Offline"}
      >
        <Text style={styles.deviceName}>{item.name}</Text>
        <Text style={styles.deviceText}>{item.location}</Text>
        <Text style={styles.deviceText}>{item.ip}</Text>
        <Text style={[styles.onlineText, item.status === "Offline" && styles.offlineText]}>
          {item.status}
        </Text>
      </TouchableOpacity>

    </View>
  )}
  ListEmptyComponent={<Text style={styles.noDevices}>–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</Text>}
/>


    </View>
    </View>
  );
};

const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: "#1E1E2E", // –§–æ–Ω –ø–æ–¥ —Ü–≤–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
      alignItems: "center",
      paddingTop: 50, // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
      paddingHorizontal: 20,
    },
    title: {
      fontSize: 24,
      fontWeight: "bold",
      color: "#EAEAEA",
      marginBottom: 20,
    },
    searchButton: {
      width: "100%",
      height: 50,
      backgroundColor: "#FBC02D",
      justifyContent: "center",
      alignItems: "center",
      borderRadius: 10,
      marginBottom: 20,
      flexDirection: "row",
    },

    searchButtonText: {
      fontSize: 18,
      fontWeight: "bold",
      color: "black",
      marginLeft: 5, // –û—Ç—Å—Ç—É–ø –æ—Ç –∏–∫–æ–Ω–∫–∏
    },
    statusText: {
      color: "gray",
      textAlign: "center",
      marginBottom: 10,
      fontSize: 14,
    },
    devicesContainer: {
      width: "100%",
      backgroundColor: "#1E1E2E", // –¶–≤–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      padding: 15,
      borderRadius: 10,
      borderWidth: 1, // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
      borderColor: "#374151", // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã (—Å–µ—Ä–æ-—Å–∏–Ω–∏–π)
      marginBottom: 20, // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
    },
    devicesHeader: {
      fontSize: 16,
      fontWeight: "bold",
      color: "#EAEAEA",
      textAlign: "center",
      marginBottom: 10,
    },
    deviceCard: {
      flexDirection: "row", // ‚úÖ –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
      padding: 15,
      borderRadius: 10,
      backgroundColor: "#282A36", // –¶–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      marginBottom: 10,
      borderWidth: 1, // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
      borderColor: "#374151", // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã (—Å–µ—Ä–æ-—Å–∏–Ω–∏–π)
    },
    deviceCardOffline: {
      padding: 15,
      borderRadius: 10,
      backgroundColor: "#2E2E2E", // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      marginBottom: 10,
      opacity: 0.5, // –î–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    },
    deviceName: {
      fontSize: 18,
      fontWeight: "bold",
      color: "#EAEAEA",
    },
    deviceText: {
      fontSize: 14,
      color: "#EAEAEA",
    },
    onlineText: {
      fontSize: 14,
      color: "#43A047",
      fontWeight: "bold",
    },
    offlineText: {
      fontSize: 14,
      color: "#E53935",
      fontWeight: "bold",
    },
    noDevices: {
      color: "gray",
      textAlign: "center",
      marginTop: 20,
    },
    deviceInfoContainer: {
        flex: 1, // ‚úÖ –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
      },
      deviceSelectionMarker: {
        width: 8, // ‚úÖ –¢–æ–ª—â–∏–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        height: "100%",
        backgroundColor: "#FBC02D", // ‚úÖ –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0,
      },
      deleteButton: {
        position: "absolute",
        top: 5, // –ü—Ä–∏–∂–∏–º–∞–µ–º –∫ –≤–µ—Ä—Ö—É
        right: 5, // –ü—Ä–∏–∂–∏–º–∞–µ–º –≤–ø—Ä–∞–≤–æ
        backgroundColor: "#1F2937", // –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω —Å –ª–µ–≥–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        borderRadius: 8, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∫—Ä—É–≥–ª–æ–π
        width: 24,
        height: 24,
        justifyContent: "center",
        alignItems: "center",
        zIndex: 10, // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
      },
      
      deleteButtonText: {
        color: "#EAEAEA",
        fontSize: 14,
        fontWeight: "bold",
        textAlign: "center",
        lineHeight: 18,  // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –≤—ã—Å–æ—Ç–µ –∫–Ω–æ–ø–∫–∏
      },
  deviceCardSelected: {
    borderColor: "#FBC02D", // –Ø—Ä–∫–æ-–∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç —Ä–∞–º–∫–∏
    borderWidth: 2, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –≥—Ä–∞–Ω–∏—Ü—ã
  },
      
  });
  
  
export default HomeScreen;